import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import pandas as pd
from datetime import datetime, timedelta
from main.news_analysis import analyze_news_sentiment
import os

CSV_PATH = "news_storage.csv"


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
def format_news(df):
    messages = []
    for _, row in df.iterrows():
        pub = row["published"]
        sentiment = row["sentiment_prediction"]

        # –í—ã–±–æ—Ä —ç–º–æ–¥–∑–∏ –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        if sentiment == "–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è":
            emoji = "üü¢"
        elif sentiment == "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è":
            emoji = "üî¥"
        elif sentiment == "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è":
            emoji = "‚ö™"
        else:
            emoji = "‚ùì"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        date_str = pub.strftime('%Y-%m-%d %H:%M') if pd.notnull(pub) else '–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'

        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"*{row['title']}*\n\n"
            f"{emoji} {sentiment.upper()}\n\n\n"
            f"üè∑Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: {row['source']}\n"
            f"üìÖ {date_str}\n"
            f"üîó [—Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å]({row['link']})"
        )
        messages.append(message)
    return messages


def sentiment_summary(df):
    counts = df["sentiment_prediction"].value_counts()
    summary = "\n".join(f"{sent}: {counts.get(sent, 0)}" for sent in ["–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è", "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è"])
    return f"üìä –ù–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω:\n{summary}"




# üìå –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.\n"
                                    "–ù–∞–ø–∏—à–∏ /analyze —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/analyze ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å 10 —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é\n"
        "/today ‚Äî –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ñ–æ–Ω –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/week ‚Äî –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ñ–æ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
        "/last ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
    )

async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥–æ—á–∫—É...")
    try:
        df = analyze_news_sentiment()
        messages = format_news(df.head(10))
        for msg in messages:
            await update.message.reply_text(msg, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    df = analyze_news_sentiment()
    today_df = df[df["published"].dt.date == datetime.now().date()]
    await update.message.reply_text(sentiment_summary(today_df))
    for msg in format_news(today_df.head(15)):
        await update.message.reply_text(msg)


async def week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    df = analyze_news_sentiment()
    week_ago = datetime.now() - timedelta(days=7)
    week_df = df[df["published"] >= week_ago]
    await update.message.reply_text(sentiment_summary(week_df))
    for msg in format_news(week_df.head(20)):
        await update.message.reply_text(msg)


async def last(update: Update, context: ContextTypes.DEFAULT_TYPE):
    df = analyze_news_sentiment()
    for msg in format_news(df.head(5)):
        await update.message.reply_text(msg)


# üöÄ –ó–∞–ø—É—Å–∫
def run_bot():
    application = ApplicationBuilder().token("8013556995:AAHNXL5_8nxG_548hEhiByITWAkQgR5J8fY").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("analyze", analyze))
    application.add_handler(CommandHandler("today", today))
    application.add_handler(CommandHandler("week", week))
    application.add_handler(CommandHandler("last", last))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()
