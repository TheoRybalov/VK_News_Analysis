import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import pandas as pd
from datetime import datetime, timedelta
from main.news_analysis import analyze_news_sentiment
import os
import asyncio

CSV_PATH = "news_storage.csv"


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


def format_news(df):
    messages = []
    for _, row in df.iterrows():
        pub = row["published"]
        sentiment = row["sentiment_prediction"]

        # –í—ã–±–æ—Ä —ç–º–æ–¥–∑–∏ –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        if sentiment == "–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è":
            emoji = "üü¢"
        elif sentiment == "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è":
            emoji = "üî¥"
        elif sentiment == "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è":
            emoji = "‚ö™"
        else:
            emoji = "‚ùì"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        date_str = pub.strftime('%Y-%m-%d %H:%M') if pd.notnull(pub) else '–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'

        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"*{row['title']}*\n\n"
            f"{emoji} {sentiment.upper()}\n\n\n"
            f"üè∑Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: {row['source']}\n"
            f"üìÖ {date_str}\n"
            f"üîó [—Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å]({row['link']})"
        )
        messages.append(message)
    return messages


def sentiment_summary(df):
    counts = df["sentiment_prediction"].value_counts()
    summary = "\n".join(f"{sent}: {counts.get(sent, 0)}" for sent in ["–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è", "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è"])
    return f"üìä –ù–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω:\n{summary}"





async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.\n"
                                    "–ù–∞–ø–∏—à–∏ /analyze —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/analyze ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å 10 —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é\n"
        "/today ‚Äî –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ñ–æ–Ω –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/week ‚Äî –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ñ–æ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
        "/last ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
    )


async def scheduled_news_analysis(context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = context.job.chat_id
        await context.bot.send_message(chat_id=chat_id, text="‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...")

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
        loop = asyncio.get_event_loop()
        df = await loop.run_in_executor(None, analyze_news_sentiment)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ
        if os.path.exists(CSV_PATH):
            sent_df = pd.read_csv(CSV_PATH)
            sent_df["published"] = pd.to_datetime(sent_df["published"], errors='coerce')
        else:
            sent_df = pd.DataFrame(columns=["link", "published"])

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã
        df["published"] = pd.to_datetime(df["published"], errors='coerce')
        df["link"] = df["link"].astype(str)
        sent_df["link"] = sent_df["link"].astype(str)

        # –í—ã–±–∏—Ä–∞–µ–º 5 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö, –Ω–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
        latest_df = df.head(5).sort_values(by='published', ascending=True)
        mask = ~latest_df.set_index(["link", "published"]).index.isin(
            sent_df.set_index(["link", "published"]).index
        )
        new_df = latest_df[mask]

        if new_df.empty:
            await context.bot.send_message(chat_id=chat_id, text="‚ÑπÔ∏è –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")
            return

        messages = format_news(new_df)

        for msg in messages:
            await context.bot.send_message(
                chat_id=chat_id,
                text=msg,
                parse_mode='Markdown'
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º CSV –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
        updated_sent = pd.concat([sent_df, new_df[["link", "published"]]], ignore_index=True)
        updated_sent.drop_duplicates(inplace=True)
        updated_sent.to_csv(CSV_PATH, index=False)

    except Exception as e:
        logging.error(f"Scheduled job error: {e}")
        await context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")



async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.effective_chat.id
        job_queue = context.application.job_queue
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π
        current_jobs = job_queue.get_jobs_by_name(str(chat_id))
        
        if not current_jobs:
            job_queue.run_repeating(
                scheduled_news_analysis,
                interval=300,  # 5 –º–∏–Ω—É—Ç
                first=10,      # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫
                chat_id=chat_id,
                name=str(chat_id)
            )
            msg = "‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ! –ù–æ–≤–æ—Å—Ç–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"
        else:
            msg = "‚ÑπÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ"
        

        await update.message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–≤–æ—Å—Ç–∏...")

            
        await update.message.reply_text(msg)
        
    except Exception as e:
        await update.message.reply_text(f"üö® –û—à–∏–±–∫–∞: {e}")
        logging.error(f"Analyze error: {e}")



async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    df = analyze_news_sentiment()
    today_df = df[df["published"].dt.date == datetime.now().date()]
    await update.message.reply_text(sentiment_summary(today_df))
    for msg in format_news(today_df.head(15)):
        await update.message.reply_text(msg)


async def week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    df = analyze_news_sentiment()
    week_ago = datetime.now() - timedelta(days=7)
    week_df = df[df["published"] >= week_ago]
    await update.message.reply_text(sentiment_summary(week_df))
    for msg in format_news(week_df.head(20)):
        await update.message.reply_text(msg)


async def last(update: Update, context: ContextTypes.DEFAULT_TYPE):
    df = analyze_news_sentiment()
    for msg in format_news(df.head(5)):
        await update.message.reply_text(msg)



def run_bot():
    application = ApplicationBuilder().token("8013556995:AAHNXL5_8nxG_548hEhiByITWAkQgR5J8fY").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("analyze", analyze))
    application.add_handler(CommandHandler("today", today))
    application.add_handler(CommandHandler("week", week))
    application.add_handler(CommandHandler("last", last))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()
